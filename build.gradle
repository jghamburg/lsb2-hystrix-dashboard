plugins {
  id 'org.springframework.boot' version '2.4.2' apply true
  id "io.spring.dependency-management" version "1.0.11.RELEASE"
  id 'java'
  id 'idea'
  id 'io.franzbecker.gradle-lombok' version '3.1.0'
  id 'com.gorylenko.gradle-git-properties' version '2.1.0'

  id 'com.palantir.docker' version '0.22.1'
  id 'com.palantir.docker-run' version '0.22.1'
  id 'com.avast.gradle.docker-compose' version '0.14.0'
  id 'com.google.cloud.tools.jib' version '2.7.1'

  id 'org.unbroken-dome.helm' version '1.4.0'
  id 'org.unbroken-dome.helm-publish' version '1.4.0'
  id 'org.unbroken-dome.helm-releases' version '1.4.0'

  id 'se.patrikerdes.use-latest-versions' version '0.2.15'
  id 'com.github.ben-manes.versions' version '0.36.0'

  id 'maven-publish'
  id "org.owasp.dependencycheck" version "5.2.4"
  id 'io.qameta.allure' version '2.8.1'
  id 'org.unbroken-dome.test-sets' version '2.1.1'
}

ext {
  set('activeSpringProfiles', 'local')
  set('chartRepoUrl', 'http://chartmuseum.local.svc.cluster.local')
}

group = 'com.gregturnquist.learningspringboot'
version = '0.0.1-SNAPSHOT'

repositories {
  mavenCentral()
  maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
  implementation platform('org.springframework.cloud:spring-cloud-dependencies:2020.0.1')
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.cloud:spring-cloud-starter-config'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard'
}

sourceCompatibility = 11
targetCompatibility = 11

lombok {
  version = '1.18.10'
  sha256 = ""
}

repositories {
  jcenter()
}

springBoot {
    buildInfo {
        properties {
            artifact = "${rootProject.name}"
            group = "${project.group}"
            name = "${rootProject.name}"
            version = "${project.version}"
        }
    }
}

bootJar {
  baseName = 'lsb2-hystrix-dashboard'
  layered()
  excludeDevtools = false
} 

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.gregturnquist.learningspringboot'
            from components.java
        }
    }
}

tasks.jib.dependsOn tasks.check
jib {
    from {
        image = 'gcr.io/distroless/java-debian10'
    }
    to {
      image = 'jghamburg/lsb2-config-server'
      tags = ["latest", project.version]
      credHelper = 'osxkeychain'
    }
    extraDirectories {
        paths = file('./ssl')
    }
    container {
      jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Xms256m', '-Xdebug']
      mainClass = 'com.greglturnquist.learningspringboot.LearningSpringBootConfigServer'
      args = []
      ports = ['8888']
    }
}
helm {
    // The global lint configuration applies to all charts
    lint {
        // treat linter warnings as errors (failing the build)
        strict = true
    }

    publishing {
        repositories {
            chartMuseum('localcharts') {
                url = uri('http://chartmuseum-chartmuseum.default.svc.cluster.local:8080')
            }
        }
    }

    filtering {
        values.put 'imageRepository', jib.to.image
        values.put 'imageTag', jib.to.tags.first()
        values.put 'appVersion', "${project.version}"
    }

    charts {
        main {
          chartVersion = "${project.version}"
          sourceDir = file('src/main/helm')
        }
    }

    releases {

        hystrixdashboard {
            valuesDir 'src/main/helm'
            forTarget('local') {
                from chart('main')
                installDependsOn 'jibDockerBuild'
                values.put 'imageTag', 'latest'
                values.put 'appVersion', "${project.version}"
                values.put 'rootUser.password', 'secret'
            }
            forTarget('nonlive') {
                from chart('main')
                installDependsOn 'jib'
            }
        }
    }
    releaseTargets {
        local {
//            kubeContext = 'docker-for-desktop'
        }
        nonlive {
//            kubeContext = 'aws'
//            atomic = true
        }
    }

}

/*
 * docker-compose plugin configuration.
 * Details on https://github.com/avast/gradle-docker-compose-plugin
 */
dockerCompose {
  useComposeFiles = ['docker/env/local.yml'] // like 'docker-compose -f <file>'; default is empty
  // startedServices = ['web'] // list of services to execute when calling 'docker-compose up' or 'docker-compose pull' (when not specified, all services are executed)
  // scale = [${serviceName1}: 5, ${serviceName2}: 2] // Pass docker compose --scale option like 'docker-compose up --scale serviceName1=5 --scale serviceName2=2'
  // forceRecreate = false // pass '--force-recreate' when calling 'docker-compose up' when set to 'true`
  buildBeforeUp = true // performs 'docker-compose build' before calling the 'up' command; default is true
  // ignorePullFailure = false // when set to true, pass '--ignore-pull-failure' to 'docker-compose pull'
  // buildAdditionalArgs = ['--force-rm']
  // pullAdditionalArgs = ['--ignore-pull-failures']
  // upAdditionalArgs = ['--no-deps']
  // downAdditionalArgs = ['--some-switch']

  waitForTcpPorts = true // turns off the waiting for exposed TCP ports opening
  captureContainersOutput = true // if true, prints output of all containers to Gradle output - very useful for debugging; default is false
  // captureContainersOutputToFile = '/path/to/logFile' // sends output of all containers to a log file

  stopContainers = true // doesn't call `docker-compose down` - see below the paragraph about reconnecting
  removeContainers = true
  // removeImages = "None" // Other accepted values are: "All" and "Local"
  // removeVolumes = true
  removeOrphans = false // removes containers for services not defined in the Compose file

  // projectName = 'my-project' // allow to set custom docker-compose project name (defaults to directory name)
  // executable = '/path/to/docker-compose' // allow to set the path of the docker-compose executable (useful if not present in PATH)
  // dockerExecutable = '/path/to/docker' // allow to set the path of the docker executable (useful if not present in PATH)
  // dockerComposeWorkingDirectory = '/path/where/docker-compose/is/invoked/from'
  // dockerComposeStopTimeout = java.time.Duration.ofSeconds(20) // time before docker-compose sends SIGTERM to the running containers after the composeDown task has been started
  // environment.put 'BACKEND_ADDRESS', '192.168.1.100' // Pass environment variable to 'docker-compose' for substitution in compose file
}
composeBuild.dependsOn bootJar
composeUp.dependsOn composeBuild
composePush.dependsOn composeBuild

jib {
  from {
    image = 'azul/zulu-openjdk-alpine:11.0.6'
  }
  to {
    image = 'jghamburg/lsb2-hystrix-dashboard:local'
//    credHelper = 'osxkeychain'
  }
  container {
    jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Xms512m', '-Xdebug', "-Dspring.profiles.active=${activeSpringProfiles}"]
    mainClass = 'com.greglturnquist.learningspringboot.LearningSpringBootHystrixDashboard'
    args = []
    ports = ['8080']
  }
}
